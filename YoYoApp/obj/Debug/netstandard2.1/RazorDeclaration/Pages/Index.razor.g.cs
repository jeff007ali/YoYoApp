#pragma checksum "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c26b71a0df5425c57ad6e743655ea81b4eca732d"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace YoYoApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using YoYoApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\_Imports.razor"
using YoYoApp.Shared;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 92 "E:\WorkSpace\C Sharp\YoYoApp\YoYoApp\Pages\Index.razor"
       
    private string[] playerString = new string[] { "Ashton Eston", "Bryan Clay", "Dean Karnazes", "Usain Bolt" };

    private Shuttle[] shuttles;
    private Player[] players;

    List<string> possibleResults = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        shuttles = await Http.GetFromJsonAsync<Shuttle[]>("sample-data/fitnessrating_beeptest.json");
        players = playerString.Select(p => new Player { PlayerName = p }).ToArray();
        possibleResults.Add("0-0");
    }

    public class Shuttle
    {
        public string AccumulatedShuttleDistance { get; set; }

        public string SpeedLevel { get; set; }

        public string ShuttleNo { get; set; }

        public string Speed { get; set; }

        public string LevelTime { get; set; }

        public TimeSpan LevelTimeSpan => new TimeSpan(0, 0, (int)Math.Round(Convert.ToDouble(LevelTime)));

        public string CommulativeTime { get; set; }

        public TimeSpan CommulativeTimeSpan => TimeSpan.Parse("00:" + CommulativeTime);

        public string StartTime { get; set; }

        public TimeSpan StartTimeSpan => TimeSpan.Parse("00:" + StartTime);
    }

    public class Player
    {
        public Guid Id { get; set; } = Guid.NewGuid();

        public string PlayerName { get; set; }

        public bool IsWarned { get; set; } = false;

        public bool IsStopped { get; set; } = false;

        public string LevelCompleted { get; set; } = "";

        public string ShuttleCompleted { get; set; } = "";

        public bool IsEditable { get; set; } = false;

        public int resultIndex { get; set; } = 0;
    }

    private int index = 0;

    private MarkupString mainBtnTxt = (MarkupString)"<p class=\"main-play-btn\"> â–¶</p>";
    private TimeSpan remainingShuttleTime = new TimeSpan();
    private TimeSpan totalShuttleTime = new TimeSpan();
    private TimeSpan elapsedTime = new TimeSpan();
    private string totalDistance = "0";

    //private TimeSpan runTimeLimit = new TimeSpan();
    private TimeSpan shuttleTimeLimit = new TimeSpan();

    private bool isStarted = false;

    private string timerDeg = "transform: rotate(0deg);";
    private bool gt180 = false;

    private void startShuttle()
    {
        if (!isStarted)
        {
            // get ready for beeptest session (reset all values)
            remainingShuttleTime = new TimeSpan();
            elapsedTime = new TimeSpan();
            //runTimeLimit = new TimeSpan();
            shuttleTimeLimit = new TimeSpan();
            totalDistance = "0";

            updateValues();
            isStarted = true;
        }
    }

    private void updateValues()
    {
        if (index < shuttles.Length)
        {
            mainBtnTxt = (MarkupString)string.Format("<p class=\"little-bold\">Level {0}<br />Shuttle {1}</p><p class=\"small-font\">{2} km/h</p>", shuttles[index].SpeedLevel, shuttles[index].ShuttleNo, shuttles[index].Speed);
            //runTimeLimit = elapsedTime.Add(shuttles[index].LevelTimeSpan);
            //remainingShuttleTime = runTimeLimit.Subtract(elapsedTime);
            shuttleTimeLimit = shuttles[index].CommulativeTimeSpan;
            totalDistance = shuttles[index].AccumulatedShuttleDistance;
            timerDeg = "transform: rotate(0deg);";
            gt180 = false;

            Timer();
            possibleResults.Add(string.Format("{0}-{1}", shuttles[index].SpeedLevel, shuttles[index].ShuttleNo));
            index++;
        }
        else
        {
            mainBtnTxt = (MarkupString)"Test Complete";
            timerDeg = "transform: rotate(360deg);";
            //index = 0;
            //isStarted = false;

            foreach (var player in players)
            {
                if (!player.IsStopped)
                {
                    player.IsStopped = true;
                    player.LevelCompleted = shuttles[shuttles.Length - 1].SpeedLevel;
                    player.ShuttleCompleted = shuttles[shuttles.Length - 1].ShuttleNo;
                    player.resultIndex = possibleResults.Count - 1;
                }
            }
        }

    }

    async Task Timer()
    {
        // To handle runtime and rest time separately
        //while (elapsedTime < runTimeLimit)
        //{
        //    await Task.Delay(1000);
        //    elapsedTime = elapsedTime.Add(new TimeSpan(0, 0, 1));
        //    remainingShuttleTime = runTimeLimit.Subtract(elapsedTime);
        //    StateHasChanged();
        //
        //}

        remainingShuttleTime = shuttleTimeLimit.Subtract(elapsedTime);
        totalShuttleTime = shuttleTimeLimit.Subtract(elapsedTime);

        while (elapsedTime < shuttleTimeLimit)
        {
            //mainBtnTxt = (MarkupString)"Rest time";
            elapsedTime = elapsedTime.Add(new TimeSpan(0, 0, 1));
            remainingShuttleTime = shuttleTimeLimit.Subtract(elapsedTime);
            setDegree(totalShuttleTime, remainingShuttleTime);

            StateHasChanged();
            await Task.Delay(1000);
        }
        await AfterTime();
        StateHasChanged();
    }

    Task AfterTime()
    {
        // mainBtnTxt = (MarkupString)"Complete timer";
        updateValues();
        return Task.CompletedTask;
    }

    private void setDegree(TimeSpan totalTime, TimeSpan remainingTime)
    {
        double totalSeconds = totalTime.TotalSeconds;
        double remainingSeconds = remainingTime.TotalSeconds;
        double elapsedSeconds = totalSeconds - remainingSeconds;

        double resDeg = ((360 * elapsedSeconds) / totalSeconds);

        if (resDeg > 180)
        {
            gt180 = true;
        }
        timerDeg = string.Format("transform: rotate({0}deg);", resDeg.ToString());
    }

    private void warnPlayer(Guid id)
    {
        var player = players.First(x => x.Id == id);
        player.IsWarned = true;
    }

    private void stopTracking(Guid id)
    {
        var player = players.First(x => x.Id == id);
        player.IsStopped = true;

        var completedIndex = index - 2;
        if (completedIndex >= 0)
        {
            player.LevelCompleted = shuttles[completedIndex].SpeedLevel;
            player.ShuttleCompleted = shuttles[completedIndex].ShuttleNo;
            player.resultIndex = completedIndex + 1; // +1 because possibleResults is started with "0-0" string and it is shifted right by 1
        }
        else
        {
            player.LevelCompleted = "0";
            player.ShuttleCompleted = "0";
            player.resultIndex = 0;
        }

    }

    private void editResult(Guid id)
    {
        var player = players.First(x => x.Id == id);
        player.IsEditable = !player.IsEditable;
    }

    private void minusResult(Guid id)
    {
        var player = players.First(x => x.Id == id);
        if (0 < player.resultIndex)
        {
            player.resultIndex--;
        }

    }

    private void plusResult(Guid id)
    {
        var player = players.First(x => x.Id == id);
        if (player.resultIndex < possibleResults.Count - 2) // -2 to remove current running level and shuttle
        {
            player.resultIndex++;
        }

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
